import pandas as pd
import numpy as np
import torch
from torch.utils.data import Dataset

class OximetryDataset(Dataset):
    def __init__(self, filename='100001.csv', window_size=300, use_columns='auto'):
        print(f"Loading dataset from {'100001.csv'}...")
        self.data = pd.read_csv('100001.csv')
        print(f"Dataset loaded: {self.data.shape[0]} rows Ã— {self.data.shape[1]} columns")
        print(f"Columns: {self.data.columns.tolist()[:10]}...")
        self.window_size = window_size
       # Identify SpO2 columns (SpO2_1, SpO2_2, SpO2_3, SpO2_4, SpO2_5)
        self.spo2_columns = [col for col in self.data.columns if 'SpO2' in col and col != 'Time']

        # Identify Pulse columns (Pulse_1, Pulse_2, etc.)
        self.pulse_columns = [col for col in self.data.columns if 'Pulse' in col and 'PI' not in col]

         # Identify other useful columns
        self.fio2_columns = [col for col in self.data.columns if 'FiO2' in col]
        self.etco2_columns = [col for col in self.data.columns if 'EtCO2' in col]
        print(f"\nDetected columns:")
        print(f"  SpO2 columns: {self.spo2_columns}")
        print(f"  Pulse columns: {self.pulse_columns}")
        print(f"  FiO2 columns: {self.fio2_columns}")
        print(f"  EtCO2 columns: {self.etco2_columns}")
        if use_columns == 'auto':
            # Use SpO2, Pulse, and FiO2 if available
            self.feature_columns = []
            if self.spo2_columns:
                self.feature_columns.extend(self.spo2_columns[:3])  # Use first 3 SpO2
            if self.pulse_columns:
                self.feature_columns.extend(self.pulse_columns[:1])  # Use first Pulse
            if self.fio2_columns:
                self.feature_columns.extend(self.fio2_columns[:1])  # Use FiO2
            while len(self.feature_columns) < 3 and self.spo2_columns:
                self.feature_columns.append(self.spo2_columns[len(self.feature_columns) % len(self.spo2_columns)])

        elif use_columns == 'spo2_only':
            self.feature_columns = self.spo2_columns[:3]
        else:
            self.feature_columns = use_columns

        print(f"\nUsing features: {self.feature_columns}")
